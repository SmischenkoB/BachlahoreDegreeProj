// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using Microsoft.ML;
using ModelBuilderML.Model;

namespace ModelBuilderML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"D:\works_c#\modelBuilder\modelBuilder\KDDTrain+.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);
            List<ModelInput> output = GetmultipleData(DATA_FILEPATH);


            Dictionary<string, BigInteger> AddingLayer = new Dictionary<string, BigInteger>();
            output.ForEach(val => { if (!AddingLayer.ContainsKey(val.AttackName)) { AddingLayer.Add(val.AttackName, 0); } });

            //// Make a single prediction on the sample data and print results
            //listOfFlags.ForEach(r => Console.WriteLine(r));
            for (int i = 0; i < output.Count; i++)
            {
                double res = -Math.Pow(sampleData.Duration - output[i].Duration, 2);
                res += -Math.Pow(sampleData.Protocol_type - output[i].Protocol_type, 2);
                res += -Math.Pow(sampleData.Service - output[i].Service, 2);
                res += -Math.Pow(sampleData.Flag - output[i].Flag, 2);
                res += -Math.Pow(sampleData.Src_bytes - output[i].Src_bytes, 2);
                res += -Math.Pow(sampleData.Dst_bytes - output[i].Dst_bytes, 2);
                res += -Math.Pow(sampleData.Land - output[i].Land, 2);
                res += -Math.Pow(sampleData.Wrong_fragment - output[i].Wrong_fragment, 2);
                res += -Math.Pow(sampleData.Urgent - output[i].Urgent, 2);
                res += -Math.Pow(sampleData.Hot - output[i].Hot, 2);
                res += -Math.Pow(sampleData.Num_failed_logins - output[i].Num_failed_logins, 2);
                res += -Math.Pow(sampleData.Logged_in - output[i].Logged_in, 2);
                res += -Math.Pow(sampleData.Num_compromised - output[i].Num_compromised, 2);
                res += -Math.Pow(sampleData.Root_shell - output[i].Root_shell, 2);
                res += -Math.Pow(sampleData.Su_attempted - output[i].Su_attempted, 2);
                res += -Math.Pow(sampleData.Num_root - output[i].Num_root, 2);
                res += -Math.Pow(sampleData.Num_file_creations - output[i].Num_file_creations, 2);
                res += -Math.Pow(sampleData.Num_shells - output[i].Num_shells, 2);
                res += -Math.Pow(sampleData.Num_access_files - output[i].Num_access_files, 2);
                res += -Math.Pow(sampleData.Num_outbound_cmds - output[i].Num_outbound_cmds, 2);
                res += -Math.Pow(sampleData.Is_host_login - output[i].Is_host_login, 2);
                res += -Math.Pow(sampleData.Is_guest_login - output[i].Is_guest_login, 2);
                res += -Math.Pow(sampleData.Count - output[i].Count, 2);
                res += -Math.Pow(sampleData.Srv_count - output[i].Srv_count, 2);
                res += -Math.Pow(sampleData.Serror_rate - output[i].Serror_rate, 2);
                res += -Math.Pow(sampleData.Srv_serror_rate - output[i].Srv_serror_rate, 2);
                res += -Math.Pow(sampleData.Rerror_rate - output[i].Rerror_rate, 2);
                res += -Math.Pow(sampleData.Srv_rerror_rate - output[i].Srv_rerror_rate, 2);
                res += -Math.Pow(sampleData.Same_srv_rate - output[i].Same_srv_rate, 2);
                res += -Math.Pow(sampleData.Diff_srv_rate - output[i].Diff_srv_rate, 2);
                res += -Math.Pow(sampleData.Srv_diff_host_rate - output[i].Srv_diff_host_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_count - output[i].Dst_host_count, 2);
                res += -Math.Pow(sampleData.Dst_host_srv_count - output[i].Dst_host_srv_count, 2);
                res += -Math.Pow(sampleData.Dst_host_same_srv_rate - output[i].Dst_host_same_srv_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_diff_srv_rate - output[i].Dst_host_diff_srv_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_same_src_port_rate - output[i].Dst_host_same_src_port_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_srv_diff_host_rate - output[i].Dst_host_srv_diff_host_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_serror_rate - output[i].Dst_host_serror_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_srv_serror_rate - output[i].Dst_host_srv_serror_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_rerror_rate - output[i].Dst_host_rerror_rate, 2);
                res += -Math.Pow(sampleData.Dst_host_srv_rerror_rate - output[i].Dst_host_srv_rerror_rate, 2);
                //?
                AddingLayer[output[i].AttackName] += new BigInteger((int)res * 20);//new BigInteger((int)Math.Pow(Math.E, ( res)));

            }

            BigInteger coef = new BigInteger(0);
            foreach (var item in AddingLayer.Values)
            {
                coef += item;
            }
            foreach (var item in AddingLayer.Keys)
            {
                Console.WriteLine(item + " " + (AddingLayer[item] * 100 / coef));
            }
            Console.WriteLine(AddingLayer.Where(t => t.Value == AddingLayer.Values.Min()).First().Key);
           

            // Make a single prediction on the sample data and print results
            ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual AttackName with predicted AttackName from sample data...\n\n");
            Console.WriteLine($"duration: {sampleData.Duration}");
            Console.WriteLine($"protocol_type: {sampleData.Protocol_type}");
            Console.WriteLine($"service: {sampleData.Service}");
            Console.WriteLine($"flag: {sampleData.Flag}");
            Console.WriteLine($"src_bytes: {sampleData.Src_bytes}");
            Console.WriteLine($"dst_bytes: {sampleData.Dst_bytes}");
            Console.WriteLine($"land: {sampleData.Land}");
            Console.WriteLine($"wrong_fragment: {sampleData.Wrong_fragment}");
            Console.WriteLine($"urgent: {sampleData.Urgent}");
            Console.WriteLine($"hot: {sampleData.Hot}");
            Console.WriteLine($"num_failed_logins: {sampleData.Num_failed_logins}");
            Console.WriteLine($"logged_in: {sampleData.Logged_in}");
            Console.WriteLine($"num_compromised: {sampleData.Num_compromised}");
            Console.WriteLine($"root_shell: {sampleData.Root_shell}");
            Console.WriteLine($"su_attempted: {sampleData.Su_attempted}");
            Console.WriteLine($"num_root: {sampleData.Num_root}");
            Console.WriteLine($"num_file_creations: {sampleData.Num_file_creations}");
            Console.WriteLine($"num_shells: {sampleData.Num_shells}");
            Console.WriteLine($"num_access_files: {sampleData.Num_access_files}");
            Console.WriteLine($"num_outbound_cmds: {sampleData.Num_outbound_cmds}");
            Console.WriteLine($"is_host_login: {sampleData.Is_host_login}");
            Console.WriteLine($"is_guest_login: {sampleData.Is_guest_login}");
            Console.WriteLine($"count: {sampleData.Count}");
            Console.WriteLine($"srv_count: {sampleData.Srv_count}");
            Console.WriteLine($"serror_rate: {sampleData.Serror_rate}");
            Console.WriteLine($"srv_serror_rate: {sampleData.Srv_serror_rate}");
            Console.WriteLine($"rerror_rate: {sampleData.Rerror_rate}");
            Console.WriteLine($"srv_rerror_rate: {sampleData.Srv_rerror_rate}");
            Console.WriteLine($"same_srv_rate: {sampleData.Same_srv_rate}");
            Console.WriteLine($"diff_srv_rate: {sampleData.Diff_srv_rate}");
            Console.WriteLine($"srv_diff_host_rate: {sampleData.Srv_diff_host_rate}");
            Console.WriteLine($"dst_host_count: {sampleData.Dst_host_count}");
            Console.WriteLine($"dst_host_srv_count: {sampleData.Dst_host_srv_count}");
            Console.WriteLine($"dst_host_same_srv_rate: {sampleData.Dst_host_same_srv_rate}");
            Console.WriteLine($"dst_host_diff_srv_rate: {sampleData.Dst_host_diff_srv_rate}");
            Console.WriteLine($"dst_host_same_src_port_rate: {sampleData.Dst_host_same_src_port_rate}");
            Console.WriteLine($"dst_host_srv_diff_host_rate: {sampleData.Dst_host_srv_diff_host_rate}");
            Console.WriteLine($"dst_host_serror_rate: {sampleData.Dst_host_serror_rate}");
            Console.WriteLine($"dst_host_srv_serror_rate: {sampleData.Dst_host_srv_serror_rate}");
            Console.WriteLine($"dst_host_rerror_rate: {sampleData.Dst_host_rerror_rate}");
            Console.WriteLine($"dst_host_srv_rerror_rate: {sampleData.Dst_host_srv_rerror_rate}");
            Console.WriteLine($"someInt: {sampleData.SomeInt}");
            Console.WriteLine($"\n\nActual AttackName: {sampleData.AttackName} \nPredicted AttackName value {predictionResult.Prediction} \nPredicted AttackName scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false).ElementAt(2)
                                                                        ;
            return sampleForPrediction;
        }

        private static List<ModelInput> GetmultipleData(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            List<ModelInput> sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false).ToList()
                                                                       ;
            return sampleForPrediction;
        }
        #endregion
    }
}
